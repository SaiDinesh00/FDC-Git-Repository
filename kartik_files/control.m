function [U, F_M_quad_actual, F_M_wing, u_desired, Qd, Quaterd_dot, w_d, w_d_dot, Euler_angles_d] = control(X, X_dot, Xd_2, Xd_dot, psi_d, dt)
    
    flag = min(size(Xd_2));
    Xd = Xd_2(:, flag);
    %% Quadcopter frame to Wing frame tranformation
    % [X, Xd, Xd_dot] = Quad_2_Wing(X, Xd, Xd_dot);
    F_M_wing = Aerodynamic_forces_n_moments(X);

    %% Outer loop - Desired thrust
    [Td, u_desired] = Desired_thrust(X, Xd_dot, F_M_wing);
    F_M_quad_desired = zeros(4, 1);
    F_M_quad_desired(1) = Td;

    %% Inner loop attitude control - desired quaternions
    [Qd, Euler_angles_d]= Inner_loop(X, Xd, X_dot, Xd_dot, psi_d, F_M_wing);
    Xd(4) = Qd(1);
    Xd(5:7) = -Qd(2:4);
    if flag == 2
        Quaterd_dot = (Xd(4:7) - Xd_2(4:7, 1)) / dt;
    else
        Quaterd_dot = [0;0;0;0];
    end

    Xd_dot(4:7) = Quaterd_dot;
    %% Desired moments to be generated by the propulsion system(motors)
    [Md_t,  w_d, w_d_dot] = Desired_moments(X, X_dot, Xd_2, Xd_dot, F_M_wing, dt, flag);
    F_M_quad_desired(2:4) = Md_t;
    
    %% Xd_dot_1 upgradation
    % if min(size(Xd_2)) == 2
    %     w_d_dot = (w_d - Xd_2(11:13,1)) / dt;
    %     Quaterd_dot = (Xd(4:7) - Xd_2(4:7, 1)) / dt;
    % else
    %     w_d_dot = [0;0;0];
    %     Quaterd_dot = [0;0;0;0];
    % end
    
    %% Control inputs, CT_dots
    Control_gains;
    F_M_quad_actual = control_allocation(X(14:17));
    F_M_t_rates = [K_T * (F_M_quad_desired(1) - F_M_quad_actual(1));
                   K_L * (F_M_quad_desired(2) - F_M_quad_actual(2));
                   K_M * (F_M_quad_desired(3) - F_M_quad_actual(3));
                   K_N * (F_M_quad_desired(4) - F_M_quad_actual(4))];
    control_mat = Control_matrix(X(14:17));
    U = control_mat^-1 * F_M_t_rates;
end